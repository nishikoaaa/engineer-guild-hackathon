# certbotが証明書を取得する前
# server {
#     listen 80;
#     server_name ~~;

#     location /.well-known/acme-challenge/ {
#         root /var/www/certbot;
#     }

#     location / {
#         return 301 https://$host$request_uri;
#     }
# }



# cetbotが証明書を取得した後
server {
    listen 80;
    server_name ~~;

    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }

    location / {
        return 301 https://$host$request_uri;
    }
}

server {
    listen 443 ssl;
    server_name ~~;

    ssl_certificate /etc/nginx/ssl/live/~~/fullchain.pem;
    ssl_certificate_key /etc/nginx/ssl/live/~~/privkey.pem;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;

    location / {
        proxy_pass http://frontend:3000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        proxy_buffering on;
        proxy_buffers 4 256k;
        proxy_buffer_size 128k;
        proxy_busy_buffers_size 256k;
        proxy_max_temp_file_size 128m;
    }

    # バックエンド（Flask API）
    location /api/ {
        proxy_pass http://backend:4000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # CORS設定（動的オリジン許可）
        set $cors_origin "";

        if ($http_origin ~* (~~|http://localhost:3000)) {
            set $cors_origin $http_origin;
        }

        add_header Access-Control-Allow-Origin "$cors_origin" always;
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS, DELETE, PUT" always;
        add_header Access-Control-Allow-Headers "Content-Type, Authorization" always;
        add_header Access-Control-Allow-Credentials "true" always;

        # プリフライトリクエスト (OPTIONS) の処理
        if ($request_method = OPTIONS) {
            add_header Content-Length 0;
            add_header Content-Type text/plain;
            return 204;
        }

        # バッファリング無効化（Flaskのストリーミング対応）
        proxy_buffering off;
        proxy_request_buffering off;
        proxy_max_temp_file_size 0;
    }

    # location /stockglance/ {
    #     # Streamlit はルートで動作することが前提なので、
    #     # クライアントから受け取った /streamlit/ 以下のパスをリライトして渡す
    #     rewrite ^/stockglance/(.*)$ /$1 break;
    #     proxy_pass http://stockglance:8501/;
    #     proxy_http_version 1.1;
    #     proxy_set_header Upgrade $http_upgrade;
    #     proxy_set_header Connection "upgrade";
    #     proxy_set_header Host $host;
    #     proxy_set_header X-Real-IP $remote_addr;
    #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    # }
}

# サブドメイン用(StockGlance)
server {
    listen 80;
    server_name ~~;

    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }

    location / {
        return 301 https://$host$request_uri;
    }
}

server {
    listen 443 ssl;
    server_name ~~;

    ssl_certificate /etc/nginx/ssl/live/~~/fullchain.pem;
    ssl_certificate_key /etc/nginx/ssl/live/~~/privkey.pem;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;

    location / {
        proxy_pass http://stockglance:8501;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }
}